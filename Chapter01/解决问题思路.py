"""
author: Lns-XueFeng
CreateTime: 2023.03.01
"""


"""
本篇探讨一下解决问题的方法，以后续的每一个Chapter中解决的问题来实际举例
当学习了数据结构与算法后，尽量以学过的这些数据结构与算法出发来构建规范的清晰的解决问题的方法
在计算机中一切都是数据，只有将问题中涉及到的数据选用到合适的数据结构，才能简化问题的难度

记住测试用例，就像每一个OJ题均给出了不同输出的测试用例
"""


"""源自《C Primer Plus》
这里进行了稍微的改动，并且只全面的写出了前两步！
原因就是我们经常对于第一第二点所分配的时间过于的少，
而第一第二点是非常非常非常重要的环节

1.定义程序的目标：
    在动手写程序之前，要在脑中有清晰的思路。想要程序去做什么首先自己要明确自己想做什么，
    思考你的程序需要哪些信息，要进行那些计算和控制，以及程序应该要报告什么信息。
    在这一步中，不涉及具体的计算机语言，应该用一般术语来描述问题。
2.设计程序：
    对程序应该完成什么任务有概念性的认识后，就应该考虑如何用程序来完成它。
    例如，用户界面应该是怎样的？如何组织程序？目标用户是谁？准备花多长时间来完成这个程序？
    除此之外，还要决定在程序（还可能是辅助文件）中如何表示数据，以及用什么方法处理数据。
    学习编程语言之初，遇到的问题都很简单，没什么可选的。但是随着要处理的情况越来越复杂，遇到决策和考虑的方面也越来越多。
    通常，选择一个合适的方式来表示信息可以更容易的设计程序和处理数据。
    再次强调，应该用一般术语来描述问题，而不是用具体的代码。
    但是，你的某些决策可能取决于语言的特性。例如，在数据表示方面，C的程序员就比Pascal的程序员有更多选择。
3.编写代码：
    设好程序后，就可以编写代码来实现它。也就是说，把你设计的程序翻译成编程语言。
    这个地方才是真正需要使用编程语言的地方。可以把思路写在纸上，但最终还是要把代码输入计算机。
4.编译
5.运行程序
6.测试和调试程序
7.维护和修改代码
"""
