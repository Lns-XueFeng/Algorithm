"""
author: Lns-XueFeng
CreateTime: 2023.03.01
"""


"""
本篇探讨一下解决问题的方法，以后续的每一个Chapter中解决的问题来实际举例
当学习了数据结构与算法后，尽量以学过的这些数据结构与算法出发来构建规范的清晰的解决问题的方法

你可能会问为什么？
在计算机中一切都是数据，只有将问题中设计到的数据选用到合适的数据结构，才能简化问题的难度


以Chapter2中的为例
    1.“括号匹配问题”，我们观察到此问题发现其括号都是成对出现，并且具有反转特性，很适合用栈数据结构
    因为栈的特性，当一直存入左括号，直至遇到一个右括号时，他俩就是刚好对应的那个（假设这个括号字符串是匹配的）
    因此，当遇到一个右括号时就弹出栈顶的元素与其进行比较判断是不是匹配......
    
    从以上出发，我们需要一个ADT Stack，以及利用相应的解决问题的算法
    我们可以假设这个Stack的各个功能接口已经有了，然后将注意力放在编写解决此问题的算法上
    最后实现这个ADT，并且测试算法，进行错误修改，直至可以处理所有情况
    
    
    2.“十进制转换为二进制问题”，
    我们知道十进制转二进制靠不断的除以二，得其每次的余数，最后反过来连起来就是其对应的二进制数
    这里又涉及到了反转，那么我们每次将出现的余数压入栈中，最后在一一弹出相连不就是结果吗？
    
    因此这次又是在理解了题意与找到解决问题的思路后，选择了与其相合适的数据结构，以简化解决问题的难度
    
    
    对于上面两个问题，我们不用栈也可以解决，用列表来做数据结构
    但是你解决问题的时候就会变得困难，因为你要时刻提醒自己，我要从哪里加入元素，从哪里取出来
    可能过了一会你就忘了你列表的哪里是头，哪里是尾了
    但是利用ADT就不一样了，你建立完栈数据结构之后你知道，它只能从右边弹出，从右边压入（定义左边为栈底，右边为栈顶）
    那么你解决问题的时候就会少考虑这个问题，而专注于解决核心问题，或者是其他的单个问题
"""